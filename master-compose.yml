# 主机配置 - 包含所有核心服务和8个GPU
name: bento-master

# 基础环境变量定义
x-base-environment: &base-environment
  # Direct postgres connection (bypassing pgbouncer for now)
  DATABASE_URL: postgresql://${POSTGRES_USER:-worker}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-taskdb}
  REDIS_URL: redis://redis:6379
  S3_URL: http://minio:9000
  S3_BUCKET: ${MINIO_BUCKET:-workflow}
  S3_ACCESS_KEY: ${MINIO_ROOT_USER:-admin}
  S3_SECRET_KEY: ${MINIO_ROOT_PASS:-password}
  RUST_LOG: ${RUST_LOG:-info}
  RUST_BACKTRACE: 1

services:
  # Redis集群主节点 - 针对80 GPU集中式优化
  redis:
    hostname: ${REDIS_HOST:-redis}
    image: ${REDIS_IMG:-redis:7.2.5-alpine3.19}
    restart: always
    ports:
      - "${MASTER_HOST_IP:-0.0.0.0}:6379:6379"
    volumes:
      - redis-data:/data
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 32G
    # 80 GPU集中式Redis优化配置
    mem_limit: ${REDIS_MEM_LIMIT:-256G}
    cpus: ${REDIS_CPUS:-32}
    # --- MODIFIED ---: 移除了可能导致启动失败的 sysctls 配置
    # sysctls:
    #   - net.core.somaxconn=${REDIS_SOMAXCONN:-65535}
    #   - net.core.netdev_max_backlog=10000
    #   - net.ipv4.tcp_max_syn_backlog=16384
    ulimits:
      memlock: -1
      nofile:
        soft: 1048576
        hard: 1048576
    command: >
      redis-server
      --bind 0.0.0.0
      --protected-mode no
      --maxmemory ${REDIS_MAX_MEMORY:-128g}
      --maxmemory-policy ${REDIS_MAX_MEMORY_POLICY:-allkeys-lru}
      --maxclients ${REDIS_MAX_CLIENTS:-10000}
      --tcp-backlog ${REDIS_TCP_BACKLOG:-16384}
      --tcp-keepalive ${REDIS_TCP_KEEPALIVE:-300}
      --timeout ${REDIS_TIMEOUT:-0}
      --save ""
      --appendonly yes
      --appendfsync everysec
      --io-threads 16
      --io-threads-do-reads yes
      --lazyfree-lazy-eviction yes
      --lazyfree-lazy-expire yes
      --lazyfree-lazy-server-del yes
      --replica-lazy-flush yes
      --tcp-keepalive 60
      --client-output-buffer-limit "normal 0 0 0"
      --client-output-buffer-limit "replica 268435456 67108864 60"
      --client-output-buffer-limit "pubsub 33554432 8388608 60"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - bento-network

  # PostgreSQL主节点
  postgres:
    hostname: ${POSTGRES_HOST:-postgres}
    image: ${POSTGRES_IMG:-postgres:16.3-bullseye}
    restart: always
    mem_limit: ${POSTGRES_MEM_LIMIT:-192G}
    cpus: ${POSTGRES_CPUS:-24}
    shm_size: ${POSTGRES_SHM_SIZE:-16G}
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-taskdb}
      POSTGRES_USER: ${POSTGRES_USER:-worker}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--data-checksums --wal-segsize=64"
      # PGDATA: /var/lib/postgresql/data/pgdata # 看看是否需要这行环境变量来强制初始化？
    ports:
      - '${MASTER_HOST_IP:-0.0.0.0}:${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}'
    volumes:
     - postgres-data:/var/lib/postgresql/data
    command: >
      postgres
      -p ${POSTGRES_PORT:-5432}
      -c max_connections=2000
      -c shared_buffers=128GB
      -c work_mem=128MB
      -c maintenance_work_mem=2GB
      -c effective_cache_size=128GB
      -c wal_buffers=128MB
      -c max_wal_size=4GB
      -c min_wal_size=1GB
      -c checkpoint_completion_target=0.9
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c max_worker_processes=16
      -c max_parallel_workers=8
      -c max_parallel_workers_per_gather=4
      -c listen_addresses='*'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-worker} -d ${POSTGRES_DB:-taskdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - bento-network

  # pgbouncer 连接池
  pgbouncer:
    # 镜像保持不变
    image: edoburu/pgbouncer:latest
    hostname: pgbouncer
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "0.0.0.0:6432:6432"
    # --- MODIFIED ---: 使用符合 edoburu/pgbouncer 官方写法的环境变量
    environment:
      # --- 1. 定义要连接的上游数据库 ---
      # 告诉 PgBouncer，当客户端请求 "taskdb" 时，应该去哪里找
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=taskdb

      # --- 2. 定义允许连接到 PgBouncer 的用户和密码 ---
      # 这将自动写入 userlist.txt
      - DB_USER=${POSTGRES_USER:-worker}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password}

      # --- 3. 定义 PgBouncer 自身的行为 ---
      - AUTH_TYPE=trust
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=5000
      - DEFAULT_POOL_SIZE=20
      - MAX_SERVER_CONNECTIONS=200
      # 增加日志输出，便于调试
      - VERBOSE=1
    networks:
      - bento-network
  # MinIO主节点
  minio:
    hostname: ${MINIO_HOST:-minio}
    image: ${MINIO_IMG:-minio/minio:RELEASE.2024-05-28T17-19-04Z}
    restart: always
    mem_limit: ${MINIO_MEM_LIMIT:-32G}
    cpus: ${MINIO_CPUS:-4}
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - '${MASTER_HOST_IP:-0.0.0.0}:9000:9000'
      - '${MASTER_HOST_IP:-0.0.0.0}:9001:9001'
    volumes:
      - minio-data:/data
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 2G
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASS:-password}
      - MINIO_DEFAULT_BUCKETS=${MINIO_BUCKET:-workflow}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 3m
    networks:
      - bento-network

  # GPU Prove Agents (主机8个GPU)
  gpu_prove_agent0: &gpu-agent
    image: risczero/risc0-bento-agent:2.3.0@sha256:5b029fb8074b3273b45e6e8fb4d6dbd86000a216688d8f1429eb893686cc1ff8
    runtime: nvidia
    restart: always
    # --- MODIFIED ---: 修正了启动依赖
    depends_on:
      pgbouncer:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    mem_limit: 24G
    cpus: 4
    environment:
      <<: *base-environment
    entrypoint: /app/agent -t prove --redis-ttl ${REDIS_TTL:-57600}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]
    networks:
      - bento-network

  gpu_prove_agent1: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['1'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent2: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['2'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent3: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['3'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent4: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['4'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent5: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['5'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent6: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['6'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent7: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['7'], capabilities: [gpu] } ] } } } }

  # Executor Agents
  exec_agent0: &exec-agent
    image: risczero/risc0-bento-agent:2.3.0@sha256:5b029fb8074b3273b45e6e8fb4d6dbd86000a216688d8f1429eb893686cc1ff8
    restart: always
    # --- MODIFIED ---: 修正了启动依赖
    depends_on:
      pgbouncer:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    mem_limit: 4G
    cpus: 4
    environment:
      <<: *base-environment
    entrypoint: /app/agent -t exec --segment-po2 ${SEGMENT_SIZE:-21} --redis-ttl ${REDIS_TTL:-57600}
    networks:
      - bento-network

  exec_agent1: { <<: *exec-agent }
  exec_agent2: { <<: *exec-agent }
  exec_agent3: { <<: *exec-agent }

  # Aux Agent
  aux_agent:
    image: risczero/risc0-bento-agent:2.3.0@sha256:5b029fb8074b3273b45e6e8fb4d6dbd86000a216688d8f1429eb893686cc1ff8
    restart: always
    # --- MODIFIED ---: 修正了启动依赖
    depends_on:
      pgbouncer:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    mem_limit: 256M
    cpus: 1
    environment:
      <<: *base-environment
    entrypoint: /app/agent -t aux --monitor-requeue --redis-ttl ${REDIS_TTL:-57600}
    networks:
      - bento-network

  # SNARK Agents
  snark_agent0: &snark-agent
    image: risczero/risc0-bento-agent:2.3.0@sha256:5b029fb8074b3273b45e6e8fb4d6dbd86000a216688d8f1429eb893686cc1ff8
    restart: always
    # --- MODIFIED ---: 修正了启动依赖
    depends_on:
      pgbouncer:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    mem_limit: 16G
    cpus: 48
    environment:
      <<: *base-environment
    entrypoint: /app/agent -t snark --redis-ttl ${REDIS_TTL:-57600}
    ulimits:
      stack: 90000000
    networks:
      - bento-network

  snark_agent1: { <<: *snark-agent }

  # REST API
  rest_api:
    image: risczero/risc0-bento-rest-api:2.3.0@sha256:caa6012548777a461b4e487d673bd0d23606f97cdecea9d1612fafd8fa8a9102
    restart: always
    # --- MODIFIED ---: 修正了启动依赖
    depends_on:
      pgbouncer:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    mem_limit: 1G
    cpus: 1
    environment:
      <<: *base-environment
    ports:
      - '${MASTER_HOST_IP:-0.0.0.0}:8081:8081'
    entrypoint: /app/rest_api --bind-addr 0.0.0.0:8081 --snark-timeout ${SNARK_TIMEOUT:-180}
    networks:
      - bento-network

networks:
  bento-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  minio-data: