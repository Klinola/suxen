# 主机配置 - 包含所有核心服务和8个GPU
name: bento-master

# 基础环境变量定义
x-base-environment: &base-environment
  # Using pgbouncer for connection pooling
  DATABASE_URL: postgresql://${POSTGRES_USER:-worker}:${POSTGRES_PASSWORD:-password}@pgbouncer:5432/${POSTGRES_DB:-taskdb}
  REDIS_URL: redis://redis:6379
  S3_URL: http://minio:9000
  S3_BUCKET: ${MINIO_BUCKET:-workflow}
  S3_ACCESS_KEY: ${MINIO_ROOT_USER:-admin}
  S3_SECRET_KEY: ${MINIO_ROOT_PASS:-password}
  RUST_LOG: ${RUST_LOG:-info}
  RISC0_HOME: /usr/local/risc0
  RUST_BACKTRACE: 1

# Agent 通用配置
x-agent-common: &agent-common
  runtime: nvidia
  build:
    context: .
    dockerfile: ${AGENT_DOCKERFILE:-dockerfiles/agent.prebuilt.dockerfile}
    args:
      BINARY_URL: ${BENTO_BINARY_URL:-https://github.com/boundless-xyz/boundless/releases/download/bento-v0.14.0/bento-bundle-linux-amd64.tar.gz}
  restart: always
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
    minio:
      condition: service_healthy
  environment:
    <<: *base-environment

# 统一镜像版本管理
x-agent-image: &agent-image risczero/risc0-bento-agent:2.3.1
x-rest-api-image: &rest-api-image risczero/risc0-bento-rest-api:2.3.1

services:
  # Redis集群主节点 - 针对80 GPU集中式优化
  redis:
    hostname: ${REDIS_HOST:-redis}
    image: ${REDIS_IMG:-redis:7.2.5-alpine3.19}
    restart: always
    ports:
      - "${MASTER_HOST_IP:-0.0.0.0}:6379:6379"
    volumes:
      - redis-data:/data
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 64G
    # 调整为合理的资源分配
    mem_limit: ${REDIS_MEM_LIMIT:-128G}
    cpus: ${REDIS_CPUS:-24}
    ulimits:
      memlock: -1
      nofile:
        soft: 1048576
        hard: 1048576
    command: >
      redis-server
      --bind 0.0.0.0
      --protected-mode no
      --maxmemory ${REDIS_MAX_MEMORY:-100g}
      --maxmemory-policy ${REDIS_MAX_MEMORY_POLICY:-allkeys-lru}
      --maxclients ${REDIS_MAX_CLIENTS:-50000}
      --tcp-backlog ${REDIS_TCP_BACKLOG:-16384}
      --tcp-keepalive ${REDIS_TCP_KEEPALIVE:-300}
      --timeout ${REDIS_TIMEOUT:-0}
      --save ""
      --appendonly yes
      --appendfsync everysec
      --io-threads 16
      --io-threads-do-reads yes
      --lazyfree-lazy-eviction yes
      --lazyfree-lazy-expire yes
      --lazyfree-lazy-server-del yes
      --replica-lazy-flush yes
      --tcp-keepalive 60
      --client-output-buffer-limit "normal 0 0 0"
      --client-output-buffer-limit "replica 268435456 67108864 60"
      --client-output-buffer-limit "pubsub 33554432 8388608 60"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - bento-network

  # PostgreSQL主节点
  postgres:
    hostname: ${POSTGRES_HOST:-postgres}
    image: ${POSTGRES_IMG:-postgres:16.3-bullseye}
    restart: always
    mem_limit: ${POSTGRES_MEM_LIMIT:-256G}
    cpus: ${POSTGRES_CPUS:-32}
    shm_size: ${POSTGRES_SHM_SIZE:-64G}
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-taskdb}
      POSTGRES_USER: ${POSTGRES_USER:-worker}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--data-checksums --wal-segsize=64 --auth-host=md5 --auth-local=trust"
    ports:
      - '0.0.0.0:${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}'
    volumes:
     - postgres-data:/var/lib/postgresql/data
    command: >
      postgres
      -p ${POSTGRES_PORT:-5432}
      -c max_connections=5000
      -c shared_buffers=64GB
      -c work_mem=512MB
      -c maintenance_work_mem=8GB
      -c effective_cache_size=192GB
      -c wal_buffers=512MB
      -c max_wal_size=16GB
      -c min_wal_size=4GB
      -c checkpoint_completion_target=0.9
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c max_worker_processes=32
      -c max_parallel_workers=16
      -c max_parallel_workers_per_gather=8
      -c listen_addresses='*'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-worker} -d ${POSTGRES_DB:-taskdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - bento-network

  # pgbouncer 连接池
  pgbouncer:
    image: edoburu/pgbouncer:latest
    hostname: pgbouncer
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "0.0.0.0:6432:5432"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=taskdb
      - DB_USER=${POSTGRES_USER:-worker}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password}
      - AUTH_TYPE=md5
      - POOL_MODE=session
      - MAX_CLIENT_CONN=10000
      - DEFAULT_POOL_SIZE=100
      - MAX_SERVER_CONNECTIONS=500
      - VERBOSE=0
    networks:
      - bento-network

  # MinIO主节点
  minio:
    hostname: ${MINIO_HOST:-minio}
    image: ${MINIO_IMG:-minio/minio:RELEASE.2024-05-28T17-19-04Z}
    restart: always
    mem_limit: ${MINIO_MEM_LIMIT:-64G}
    cpus: ${MINIO_CPUS:-16}
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - '0.0.0.0:9000:9000'
      - '0.0.0.0:9001:9001'
    volumes:
      - minio-data:/data
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 8G
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASS:-password}
      - MINIO_DEFAULT_BUCKETS=${MINIO_BUCKET:-workflow}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 3m
    networks:
      - bento-network

  # GPU Prove Agents (主机8个GPU)
  gpu_prove_agent0: &gpu-agent
    <<: *agent-common
    mem_limit: 64G
    cpus: 16
    entrypoint: /app/agent -t prove --redis-ttl ${REDIS_TTL:-57600}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]
    networks:
      - bento-network

  gpu_prove_agent1: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['1'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent2: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['2'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent3: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['3'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent4: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['4'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent5: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['5'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent6: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['6'], capabilities: [gpu] } ] } } } }
  gpu_prove_agent7: { <<: *gpu-agent, deploy: { resources: { reservations: { devices: [ { driver: nvidia, device_ids: ['7'], capabilities: [gpu] } ] } } } }

  # Executor Agents
  exec_agent0: &exec-agent
    <<: *agent-common
    mem_limit: 16G
    cpus: 8
    entrypoint: /app/agent -t exec --segment-po2 ${SEGMENT_SIZE:-21} --redis-ttl ${REDIS_TTL:-57600}
    networks:
      - bento-network

  exec_agent1: { <<: *exec-agent }
  exec_agent2: { <<: *exec-agent }
  exec_agent3: { <<: *exec-agent }
  exec_agent4: { <<: *exec-agent }
  exec_agent5: { <<: *exec-agent }
  exec_agent6: { <<: *exec-agent }
  exec_agent7: { <<: *exec-agent }
  exec_agent8: { <<: *exec-agent }
  
  # Aux Agent
  aux_agent:
    <<: *agent-common
    mem_limit: 4G
    cpus: 2
    entrypoint: /app/agent -t aux --monitor-requeue --redis-ttl ${REDIS_TTL:-57600}
    networks:
      - bento-network

  # SNARK Agents
  snark_agent0: &snark-agent
    <<: *agent-common
    mem_limit: 96G
    cpus: 64
    entrypoint: /app/agent -t snark --redis-ttl ${REDIS_TTL:-57600}
    ulimits:
      stack: 90000000
    networks:
      - bento-network

  snark_agent1: { <<: *snark-agent }

  # REST API
  rest_api:
    build:
      context: .
      dockerfile: ${REST_API_DOCKERFILE:-dockerfiles/rest_api.prebuilt.dockerfile}
      args:
        BINARY_URL: ${BENTO_BINARY_URL:-https://github.com/boundless-xyz/boundless/releases/download/bento-v0.14.0/bento-bundle-linux-amd64.tar.gz}
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    mem_limit: 32G
    cpus: 16
    environment:
      <<: *base-environment
    ports:
      - '0.0.0.0:8081:8081'
    entrypoint: /app/rest_api --bind-addr 0.0.0.0:8081 --snark-timeout ${SNARK_TIMEOUT:-180}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - bento-network

networks:
  bento-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  minio-data: